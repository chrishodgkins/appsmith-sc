{
  "gitSyncId": "6833bd1e663f59025c630a90_c341d3d1-41cf-4453-afc7-413438112178",
  "id": "Customer Viewer v3_gen1DiagramMap",
  "pluginId": "postgres-plugin",
  "pluginType": "DB",
  "unpublishedAction": {
    "actionConfiguration": {
      "body": "-- ============================================================================\n-- FUNCTION 1: IDENTIFY DATA SOURCES (SYD1/SYD2) FOR EACH ACCOUNT\n-- ============================================================================\n-- Extract unique combinations of account numbers and their associated\n-- data sources (SYD1 or SYD2) from local_policy table\n-- ============================================================================\nWITH data_source_lookup AS (\n    SELECT DISTINCT\n        \"account_no\",\n        \"data_source\"\n    FROM local_policy\n    WHERE (\"data_source\" LIKE 'SYD1%' OR \"data_source\" LIKE 'SYD2%')\n),\n\n-- ============================================================================\n-- FUNCTION 2: EXTRACT CUSTOMER REALMS FROM LOCAL POLICY\n-- ============================================================================\n-- Parse all cust-* realm names from src_realm field, excluding secureco realms\n-- These represent customer-specific routing realms in Gen1 platform\n-- ============================================================================\ncustomer_realm_extract AS (\n    SELECT DISTINCT\n        lp.\"account_no\",\n        lp.\"data_source\",\n        unnest(regexp_matches(lp.\"src_realm\", 'cust-[a-zA-Z0-9_-]+', 'g')) as individual_realm\n    FROM local_policy lp\n    WHERE (lp.\"data_source\" LIKE 'SYD1%' OR lp.\"data_source\" LIKE 'SYD2%')\n        AND lp.\"src_realm\" IS NOT NULL\n        AND lp.\"src_realm\" NOT LIKE '%secureco%'\n),\n\n-- ============================================================================\n-- FUNCTION 3: IDENTIFY CLOUD-AWS REALM USAGE\n-- ============================================================================\n-- Check if customer routes through cloud-aws realm by searching\n-- src_realm, dest_realms, and hoplist fields\n-- ============================================================================\ncloud_aws_realms AS (\n    SELECT DISTINCT\n        lp.\"account_no\",\n        lp.\"data_source\",\n        'cloud-aws' as realm_name\n    FROM local_policy lp\n    WHERE (lp.\"data_source\" LIKE 'SYD1%' OR lp.\"data_source\" LIKE 'SYD2%')\n        AND (lp.\"src_realm\" LIKE '%cloud-aws%' \n             OR lp.\"dest_realms\" LIKE '%cloud-aws%'\n             OR lp.\"hoplist\" LIKE '%cloud-aws%')\n),\n\n-- ============================================================================\n-- FUNCTION 4: RETRIEVE GEN1 NETWORK METADATA\n-- ============================================================================\n-- Pull customer configuration data from gen1_ntwk_data including\n-- realm info, carrier flags, and IVP external ID for later joins\n-- ============================================================================\ncustomer_realm_data AS (\n    SELECT DISTINCT\n        c.\"customer\",\n        c.\"account_no\",\n        c.\"lp_src_realm\",\n        c.\"lp_nexthop_list\",\n        c.\"flag_sema_onprem\",\n        c.\"flag_sema_cloud\",\n        c.\"lp_nextrealm_list\",\n        c.\"vocus\", \n        c.\"symbio\", \n        c.\"aapt\", \n        c.\"optus\", \n        c.\"telstra\",\n        c.\"ivp_externalid\"\n    FROM gen1_ntwk_data c\n),\n\n-- ============================================================================\n-- FUNCTION 5: JOIN IVP ACCOUNT INFORMATION\n-- ============================================================================\n-- Link IVP account details (status, services, carriages) using external ID\n-- from Gen1 customer data\n-- ============================================================================\nivp_account_data AS (\n    SELECT DISTINCT\n        crd.\"account_no\",\n        ivp.\"accountname\",\n        ivp.\"accountstatus\",\n        ivp.\"path\",\n        ivp.\"svcParty\",\n        ivp.\"svcSIP\",\n        ivp.\"svcVoiceGateway\",\n        ivp.\"svccarriages\",\n        ivp.\"externalid\"\n    FROM customer_realm_data crd\n    LEFT JOIN ivpaccounts ivp ON crd.\"ivp_externalid\" = ivp.\"externalid\"\n    WHERE crd.\"ivp_externalid\" IS NOT NULL\n),\n\n-- ============================================================================\n-- FUNCTION 6: AGGREGATE IVP SERVICE DETAILS\n-- ============================================================================\n-- Extract and concatenate IVP service configuration details including\n-- region names, routing domains, inbound/outbound URIs, and ACLs\n-- ============================================================================\nivp_service_data AS (\n    SELECT \n        \"externalid\",\n        MAX(CASE WHEN \"service_name\" = 'Region Name' THEN \"service_value\" END) as \"Region Name\",\n        STRING_AGG(CASE WHEN \"service_name\" = 'Service name' THEN \"service_value\" END, ', ' ORDER BY \"service_value\") as \"IVPName\",\n        STRING_AGG(CASE WHEN \"service_name\" = 'Routing domain' THEN \"service_value\" END, ', ' ORDER BY \"service_value\") as \"Routing Domain\",\n        STRING_AGG(CASE WHEN \"service_name\" = 'Inbound server/uri' THEN \"service_value\" END, ', ' ORDER BY \"service_value\") as \"Inbound server/uri\",\n        STRING_AGG(CASE WHEN \"service_name\" = 'Outbound server/uri' THEN \"service_value\" END, ', ' ORDER BY \"service_value\") as \"Outbound server/uri\",\n        STRING_AGG(CASE WHEN \"service_name\" = 'ACL' THEN \"service_value\" END, ', ' ORDER BY \"service_value\") as \"ACL\"\n    FROM ivpservices\n    WHERE \"service_name\" IN ('Service name', 'Region Name', 'Routing domain', 'Inbound server/uri', 'Outbound server/uri', 'ACL')\n    GROUP BY \"externalid\"\n),\n\n-- ============================================================================\n-- FUNCTION 7: AGGREGATE CUSTOMER REALM AND CARRIER DATA\n-- ============================================================================\n-- Combine all customer realms, detect cloud-aws usage, identify carrier\n-- connections, check for Sema payments and IBM/Azure traffic routing\n-- ============================================================================\ncustomer_realms AS (\n    SELECT DISTINCT\n        crd.\"customer\",\n        crd.\"account_no\",\n        dsl.\"data_source\",\n        -- Aggregate ALL cust-* realms found\n        STRING_AGG(DISTINCT cre.individual_realm, ',' ORDER BY cre.individual_realm) as customer_realm,\n        -- Check if customer uses cloud-aws\n        BOOL_OR(crd.\"lp_src_realm\" LIKE '%cloud-aws%' OR crd.\"lp_nexthop_list\" LIKE '%cloud-aws%') as has_cloud_aws,\n        BOOL_OR(crd.\"flag_sema_onprem\" = 'true' OR crd.\"flag_sema_cloud\" = 'true') as uses_sema_payments,\n        MAX(crd.\"lp_nextrealm_list\") as dest_realms,\n        BOOL_OR(\n            crd.\"lp_src_realm\" LIKE '%cloud-ibmsyd%' OR crd.\"lp_src_realm\" LIKE '%cloudAzure%'\n                OR crd.\"lp_nextrealm_list\" LIKE '%cloud-ibmsyd%' OR crd.\"lp_nextrealm_list\" LIKE '%cloudAzure%'\n        ) as traffic_via_ibm_azure,\n        BOOL_OR(crd.\"vocus\" = 'true') as vocus,\n        BOOL_OR(crd.\"symbio\" = 'true') as symbio,\n        BOOL_OR(crd.\"aapt\" = 'true') as aapt,\n        BOOL_OR(crd.\"optus\" = 'true') as optus,\n        BOOL_OR(crd.\"telstra\" = 'true') as telstra\n    FROM customer_realm_data crd\n    INNER JOIN data_source_lookup dsl ON crd.\"account_no\" = dsl.\"account_no\"\n    LEFT JOIN customer_realm_extract cre ON crd.\"account_no\" = cre.\"account_no\" AND dsl.\"data_source\" = cre.\"data_source\"\n    GROUP BY crd.\"customer\", crd.\"account_no\", dsl.\"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 8: EXTRACT PURECLOUD DOMAINS FROM ROUTING\n-- ============================================================================\n-- Parse Genesys PureCloud domain names from local policy hoplist field\n-- for customers using PureCloud BYOC integration\n-- ============================================================================\npurecloud_domains AS (\n    SELECT DISTINCT\n        lp.\"account_no\",\n        lp.\"data_source\",\n        (regexp_matches(lp.\"hoplist\", '(sc-[a-z0-9]+\\.byoc\\.mypurecloud\\.com\\.au)', 'g'))[1] as purecloud_domain\n    FROM local_policy lp\n    WHERE lp.\"hoplist\" LIKE '%.mypurecloud.com.au%'\n        AND (lp.\"data_source\" LIKE 'SYD1%' OR lp.\"data_source\" LIKE 'SYD2%')\n),\n\n-- ============================================================================\n-- FUNCTION 9: FIND SESSION AGENTS FOR CUSTOMER REALMS\n-- ============================================================================\n-- Match customer realms to their session agent hostnames from session_agent\n-- table using realm_id and data_source\n-- ============================================================================\ncustomer_session_agents AS (\n    SELECT DISTINCT\n        cre.\"account_no\",\n        cre.\"data_source\",\n        sa.\"hostname\" as session_agent_hostname\n    FROM customer_realm_extract cre\n    INNER JOIN session_agent sa\n        ON cre.individual_realm = sa.\"realm_id\"\n        AND cre.\"data_source\" = sa.\"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 10: COMBINE SESSION AGENTS AND PURECLOUD DOMAINS\n-- ============================================================================\n-- Union session agents with PureCloud domains to create complete list\n-- of SIP endpoints\n-- ============================================================================\nall_session_agents AS (\n    SELECT \"account_no\", \"data_source\", session_agent_hostname as agent\n    FROM customer_session_agents\n    UNION ALL\n    SELECT \"account_no\", \"data_source\", purecloud_domain as agent\n    FROM purecloud_domains\n),\n\n-- ============================================================================\n-- FUNCTION 11: AGGREGATE ALL SESSION AGENTS\n-- ============================================================================\n-- Concatenate all session agents and PureCloud domains into single\n-- comma-separated string per account and data source\n-- ============================================================================\naggregated_agents AS (\n    SELECT\n        \"account_no\",\n        \"data_source\",\n        STRING_AGG(DISTINCT agent, ',' ORDER BY agent) as all_session_agents\n    FROM all_session_agents\n    GROUP BY \"account_no\", \"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 12: EXTRACT SIP INTERFACE IPs FROM CUSTOMER REALMS\n-- ============================================================================\n-- Get SIP interface IP addresses for all customer-specific realms\n-- ============================================================================\ncustomer_sip_interfaces AS (\n    SELECT DISTINCT\n        cre.\"account_no\",\n        cre.\"data_source\",\n        si.\"sipport_address\"\n    FROM customer_realm_extract cre\n    INNER JOIN sip_interface si \n        ON cre.individual_realm = si.\"realm_id\"\n        AND cre.\"data_source\" = si.\"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 13: EXTRACT SIP INTERFACE IPs FROM CLOUD-AWS REALM\n-- ============================================================================\n-- Get SIP interface IP addresses for cloud-aws realm if customer uses it\n-- ============================================================================\ncloud_aws_sip_interfaces AS (\n    SELECT DISTINCT\n        car.\"account_no\",\n        car.\"data_source\",\n        si.\"sipport_address\"\n    FROM cloud_aws_realms car\n    INNER JOIN sip_interface si\n        ON car.realm_name = si.\"realm_id\"\n        AND car.\"data_source\" = si.\"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 14: COMBINE ALL SIP INTERFACE IPs\n-- ============================================================================\n-- Merge customer realm and cloud-aws SIP interfaces, excluding carrier\n-- interfaces, and aggregate into comma-separated list\n-- ============================================================================\nsip_interfaces AS (\n    SELECT\n        \"account_no\",\n        \"data_source\",\n        STRING_AGG(DISTINCT \"sipport_address\", ', ' ORDER BY \"sipport_address\") as ip_addresses\n    FROM (\n        SELECT \"account_no\", \"data_source\", \"sipport_address\" FROM customer_sip_interfaces\n        UNION\n        SELECT \"account_no\", \"data_source\", \"sipport_address\" FROM cloud_aws_sip_interfaces\n    ) combined\n    GROUP BY \"account_no\", \"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 15: AGGREGATE LOCAL POLICY ROUTING RULES\n-- ============================================================================\n-- Concatenate all local policy entries per account into pipe-delimited\n-- summary for detailed routing analysis\n-- ============================================================================\nlocal_policy_details AS (\n    SELECT \n        \"account_no\",\n        \"data_source\",\n        STRING_AGG(\n            CONCAT_WS('<|>',\n                \"data_source\",\n                COALESCE(\"lp_from_range\", ''),\n                COALESCE(\"lp_to_range\", ''),\n                COALESCE(\"active\", ''),\n                COALESCE(\"src_realm\", ''),\n                COALESCE(\"hoplist\", ''),\n                COALESCE(\"dest_realms\", '')\n            ),\n            '|' || E'\\n'\n            ORDER BY \"lp_from_range\", \"lp_to_range\"\n        ) as policy_details\n    FROM local_policy\n    WHERE (\"data_source\" LIKE 'SYD1%' OR \"data_source\" LIKE 'SYD2%')\n    GROUP BY \"account_no\", \"data_source\"\n),\n\n-- ============================================================================\n-- FUNCTION 16: IDENTIFY IVP-ONLY CUSTOMERS (NO GEN1)\n-- ============================================================================\n-- Find customers that have IVP services but no Gen1 local_policy entries\n-- ============================================================================\ncustomers_without_gen1 AS (\n    SELECT DISTINCT\n        c.\"customer\",\n        c.\"account_no\",\n        c.\"ivp_externalid\"\n    FROM gen1_ntwk_data c\n    LEFT JOIN local_policy lp \n        ON c.\"account_no\" = lp.\"account_no\" \n        AND (lp.\"data_source\" LIKE 'SYD1%' OR lp.\"data_source\" LIKE 'SYD2%')\n    WHERE lp.\"account_no\" IS NULL\n)\n\n-- ============================================================================\n-- FUNCTION 17: PRIORITIZE SYD1 OVER SYD2 IN OUTPUT\n-- ============================================================================\n-- Wrap UNION query in subquery to enable ORDER BY with expressions\n-- SYD1 records appear first (priority 1), then SYD2 (priority 2)\n-- This ensures JavaScript .find() selects SYD1 data when both exist\n-- ============================================================================\nSELECT * FROM (\n    SELECT DISTINCT\n        cr.\"customer\",\n        cr.\"account_no\",\n        cr.\"data_source\",\n        -- Build source_realm list with ALL cust-* realms plus cloud-aws if applicable\n        CASE\n            WHEN cr.customer_realm IS NOT NULL AND cr.has_cloud_aws THEN cr.customer_realm || ',cloud-aws'\n            WHEN cr.customer_realm IS NOT NULL THEN cr.customer_realm\n            WHEN cr.has_cloud_aws THEN 'cloud-aws'\n            ELSE NULL\n        END as \"source_realm\",\n        CONCAT_WS(', ',\n            CASE WHEN cr.vocus THEN 'Vocus' END,\n            CASE WHEN cr.symbio THEN 'Symbio' END,\n            CASE WHEN cr.aapt THEN 'AAPT' END,\n            CASE WHEN cr.optus THEN 'Optus' END,\n            CASE WHEN cr.telstra THEN 'Telstra' END\n        ) as \"carrier_connections\",\n        cr.uses_sema_payments,\n        NULL as \"genesys_purecloud_domains\",\n        aa.all_session_agents as \"customer_realm_session_agents\",\n        si.ip_addresses as \"sip_interface_ips\",\n        cr.traffic_via_ibm_azure as \"gen1_ivp_backbone\",\n        lpd.policy_details as \"local_policy_summary\",\n        -- IVP account columns\n        ivp.\"externalid\" as \"ivp_externalid\",\n        ivp.\"accountname\" as \"ivp_accountname\",\n        ivp.\"accountstatus\" as \"ivp_accountstatus\",\n        ivp.\"path\" as \"ivp_path\",\n        ivp.\"svcParty\" as \"ivp_svcParty\",\n        ivp.\"svcSIP\" as \"ivp_svcSIP\",\n        ivp.\"svcVoiceGateway\" as \"ivp_svcVoiceGateway\",\n        ivp.\"svccarriages\" as \"ivp_svccarriages\",\n        -- IVP service columns\n        ivps.\"IVPName\",\n        ivps.\"Region Name\",\n        ivps.\"Routing Domain\",\n        ivps.\"Inbound server/uri\",\n        ivps.\"Outbound server/uri\",\n        ivps.\"ACL\"\n    FROM customer_realms cr\n    LEFT JOIN aggregated_agents aa ON cr.\"account_no\" = aa.\"account_no\" AND cr.\"data_source\" = aa.\"data_source\"\n    LEFT JOIN sip_interfaces si ON cr.\"account_no\" = si.\"account_no\" AND cr.\"data_source\" = si.\"data_source\"\n    LEFT JOIN local_policy_details lpd ON cr.\"account_no\" = lpd.\"account_no\" AND cr.\"data_source\" = lpd.\"data_source\"\n    LEFT JOIN ivp_account_data ivp ON cr.\"account_no\" = ivp.\"account_no\"\n    LEFT JOIN ivp_service_data ivps ON ivp.\"externalid\" = ivps.\"externalid\"\n\n    UNION ALL\n\n    SELECT DISTINCT\n        cwg.\"customer\",\n        cwg.\"account_no\",\n        NULL as \"data_source\",\n        NULL as \"source_realm\",\n        NULL as \"carrier_connections\",\n        NULL::boolean as \"uses_sema_payments\",\n        NULL as \"genesys_purecloud_domains\",\n        NULL as \"customer_realm_session_agents\",\n        NULL as \"sip_interface_ips\",\n        NULL::boolean as \"gen1_ivp_backbone\",\n        NULL as \"local_policy_summary\",\n        ivp.\"externalid\" as \"ivp_externalid\",\n        ivp.\"accountname\" as \"ivp_accountname\",\n        ivp.\"accountstatus\" as \"ivp_accountstatus\",\n        ivp.\"path\" as \"ivp_path\",\n        ivp.\"svcParty\" as \"ivp_svcParty\",\n        ivp.\"svcSIP\" as \"ivp_svcSIP\",\n        ivp.\"svcVoiceGateway\" as \"ivp_svcVoiceGateway\",\n        ivp.\"svccarriages\" as \"ivp_svccarriages\",\n        ivps.\"IVPName\",\n        ivps.\"Region Name\",\n        ivps.\"Routing Domain\",\n        ivps.\"Inbound server/uri\",\n        ivps.\"Outbound server/uri\",\n        ivps.\"ACL\"\n    FROM customers_without_gen1 cwg\n    LEFT JOIN ivpaccounts ivp ON cwg.\"ivp_externalid\" = ivp.\"externalid\"\n    LEFT JOIN ivp_service_data ivps ON ivp.\"externalid\" = ivps.\"externalid\"\n) combined_results\nORDER BY \"customer\", \n         CASE \n           WHEN \"data_source\" LIKE 'SYD1%' THEN 1 \n           WHEN \"data_source\" LIKE 'SYD2%' THEN 2 \n           ELSE 3 \n         END,\n         \"data_source\";",
      "encodeParamsToggle": true,
      "paginationType": "NONE",
      "pluginSpecifiedTemplates": [
        {
          "value": true
        }
      ],
      "timeoutInMillisecond": 10000
    },
    "confirmBeforeExecute": false,
    "datasource": {
      "id": "Secco_Gen1_pgdb",
      "isAutoGenerated": false,
      "name": "Secco_Gen1_pgdb",
      "pluginId": "postgres-plugin"
    },
    "dynamicBindingPathList": [],
    "name": "gen1DiagramMap",
    "pageId": "Customer Viewer v3",
    "runBehaviour": "ON_PAGE_LOAD",
    "userSetOnLoad": false
  }
}