-- ============================================================================
-- FUNCTION 1: IDENTIFY DATA SOURCES (SYD1/SYD2) FOR EACH ACCOUNT
-- ============================================================================
-- Extract unique combinations of account numbers and their associated
-- data sources (SYD1 or SYD2) from local_policy table
-- ============================================================================
WITH data_source_lookup AS (
    SELECT DISTINCT
        "account_no",
        "data_source"
    FROM local_policy
    WHERE ("data_source" LIKE 'SYD1%' OR "data_source" LIKE 'SYD2%')
),

-- ============================================================================
-- FUNCTION 2: EXTRACT CUSTOMER REALMS FROM LOCAL POLICY
-- ============================================================================
-- Parse all cust-* realm names from src_realm field, excluding secureco realms
-- These represent customer-specific routing realms in Gen1 platform
-- ============================================================================
customer_realm_extract AS (
    SELECT DISTINCT
        lp."account_no",
        lp."data_source",
        unnest(regexp_matches(lp."src_realm", 'cust-[a-zA-Z0-9_-]+', 'g')) as individual_realm
    FROM local_policy lp
    WHERE (lp."data_source" LIKE 'SYD1%' OR lp."data_source" LIKE 'SYD2%')
        AND lp."src_realm" IS NOT NULL
        AND lp."src_realm" NOT LIKE '%secureco%'
),

-- ============================================================================
-- FUNCTION 3: IDENTIFY CLOUD-AWS REALM USAGE
-- ============================================================================
-- Check if customer routes through cloud-aws realm by searching
-- src_realm, dest_realms, and hoplist fields
-- ============================================================================
cloud_aws_realms AS (
    SELECT DISTINCT
        lp."account_no",
        lp."data_source",
        'cloud-aws' as realm_name
    FROM local_policy lp
    WHERE (lp."data_source" LIKE 'SYD1%' OR lp."data_source" LIKE 'SYD2%')
        AND (lp."src_realm" LIKE '%cloud-aws%' 
             OR lp."dest_realms" LIKE '%cloud-aws%'
             OR lp."hoplist" LIKE '%cloud-aws%')
),

-- ============================================================================
-- FUNCTION 4: RETRIEVE GEN1 NETWORK METADATA
-- ============================================================================
-- Pull customer configuration data from gen1_ntwk_data including
-- realm info, carrier flags, and IVP external ID for later joins
-- ============================================================================
customer_realm_data AS (
    SELECT DISTINCT
        c."customer",
        c."account_no",
        c."lp_src_realm",
        c."lp_nexthop_list",
        c."flag_sema_onprem",
        c."flag_sema_cloud",
        c."lp_nextrealm_list",
        c."vocus", 
        c."symbio", 
        c."aapt", 
        c."optus", 
        c."telstra",
        c."ivp_externalid"
    FROM gen1_ntwk_data c
),

-- ============================================================================
-- FUNCTION 5: JOIN IVP ACCOUNT INFORMATION
-- ============================================================================
-- Link IVP account details (status, services, carriages) using external ID
-- from Gen1 customer data
-- ============================================================================
ivp_account_data AS (
    SELECT DISTINCT
        crd."account_no",
        ivp."accountname",
        ivp."accountstatus",
        ivp."path",
        ivp."svcParty",
        ivp."svcSIP",
        ivp."svcVoiceGateway",
        ivp."svccarriages",
        ivp."externalid"
    FROM customer_realm_data crd
    LEFT JOIN ivpaccounts ivp ON crd."ivp_externalid" = ivp."externalid"
    WHERE crd."ivp_externalid" IS NOT NULL
),

-- ============================================================================
-- FUNCTION 6: AGGREGATE IVP SERVICE DETAILS
-- ============================================================================
-- Extract and concatenate IVP service configuration details including
-- region names, routing domains, inbound/outbound URIs, and ACLs
-- ============================================================================
ivp_service_data AS (
    SELECT 
        "externalid",
        MAX(CASE WHEN "service_name" = 'Region Name' THEN "service_value" END) as "Region Name",
        STRING_AGG(CASE WHEN "service_name" = 'Service name' THEN "service_value" END, ', ' ORDER BY "service_value") as "IVPName",
        STRING_AGG(CASE WHEN "service_name" = 'Routing domain' THEN "service_value" END, ', ' ORDER BY "service_value") as "Routing Domain",
        STRING_AGG(CASE WHEN "service_name" = 'Inbound server/uri' THEN "service_value" END, ', ' ORDER BY "service_value") as "Inbound server/uri",
        STRING_AGG(CASE WHEN "service_name" = 'Outbound server/uri' THEN "service_value" END, ', ' ORDER BY "service_value") as "Outbound server/uri",
        STRING_AGG(CASE WHEN "service_name" = 'ACL' THEN "service_value" END, ', ' ORDER BY "service_value") as "ACL"
    FROM ivpservices
    WHERE "service_name" IN ('Service name', 'Region Name', 'Routing domain', 'Inbound server/uri', 'Outbound server/uri', 'ACL')
    GROUP BY "externalid"
),

-- ============================================================================
-- FUNCTION 7: AGGREGATE CUSTOMER REALM AND CARRIER DATA
-- ============================================================================
-- Combine all customer realms, detect cloud-aws usage, identify carrier
-- connections, check for Sema payments and IBM/Azure traffic routing
-- ============================================================================
customer_realms AS (
    SELECT DISTINCT
        crd."customer",
        crd."account_no",
        dsl."data_source",
        -- Aggregate ALL cust-* realms found
        STRING_AGG(DISTINCT cre.individual_realm, ',' ORDER BY cre.individual_realm) as customer_realm,
        -- Check if customer uses cloud-aws
        BOOL_OR(crd."lp_src_realm" LIKE '%cloud-aws%' OR crd."lp_nexthop_list" LIKE '%cloud-aws%') as has_cloud_aws,
        BOOL_OR(crd."flag_sema_onprem" = 'true' OR crd."flag_sema_cloud" = 'true') as uses_sema_payments,
        MAX(crd."lp_nextrealm_list") as dest_realms,
        BOOL_OR(
            crd."lp_src_realm" LIKE '%cloud-ibmsyd%' OR crd."lp_src_realm" LIKE '%cloudAzure%'
                OR crd."lp_nextrealm_list" LIKE '%cloud-ibmsyd%' OR crd."lp_nextrealm_list" LIKE '%cloudAzure%'
        ) as traffic_via_ibm_azure,
        BOOL_OR(crd."vocus" = 'true') as vocus,
        BOOL_OR(crd."symbio" = 'true') as symbio,
        BOOL_OR(crd."aapt" = 'true') as aapt,
        BOOL_OR(crd."optus" = 'true') as optus,
        BOOL_OR(crd."telstra" = 'true') as telstra
    FROM customer_realm_data crd
    INNER JOIN data_source_lookup dsl ON crd."account_no" = dsl."account_no"
    LEFT JOIN customer_realm_extract cre ON crd."account_no" = cre."account_no" AND dsl."data_source" = cre."data_source"
    GROUP BY crd."customer", crd."account_no", dsl."data_source"
),

-- ============================================================================
-- FUNCTION 8: EXTRACT PURECLOUD DOMAINS FROM ROUTING
-- ============================================================================
-- Parse Genesys PureCloud domain names from local policy hoplist field
-- for customers using PureCloud BYOC integration
-- ============================================================================
purecloud_domains AS (
    SELECT DISTINCT
        lp."account_no",
        lp."data_source",
        (regexp_matches(lp."hoplist", '(sc-[a-z0-9]+\.byoc\.mypurecloud\.com\.au)', 'g'))[1] as purecloud_domain
    FROM local_policy lp
    WHERE lp."hoplist" LIKE '%.mypurecloud.com.au%'
        AND (lp."data_source" LIKE 'SYD1%' OR lp."data_source" LIKE 'SYD2%')
),

-- ============================================================================
-- FUNCTION 9: FIND SESSION AGENTS FOR CUSTOMER REALMS
-- ============================================================================
-- Match customer realms to their session agent hostnames from session_agent
-- table using realm_id and data_source
-- ============================================================================
customer_session_agents AS (
    SELECT DISTINCT
        cre."account_no",
        cre."data_source",
        sa."hostname" as session_agent_hostname
    FROM customer_realm_extract cre
    INNER JOIN session_agent sa
        ON cre.individual_realm = sa."realm_id"
        AND cre."data_source" = sa."data_source"
),

-- ============================================================================
-- FUNCTION 10: COMBINE SESSION AGENTS AND PURECLOUD DOMAINS
-- ============================================================================
-- Union session agents with PureCloud domains to create complete list
-- of SIP endpoints
-- ============================================================================
all_session_agents AS (
    SELECT "account_no", "data_source", session_agent_hostname as agent
    FROM customer_session_agents
    UNION ALL
    SELECT "account_no", "data_source", purecloud_domain as agent
    FROM purecloud_domains
),

-- ============================================================================
-- FUNCTION 11: AGGREGATE ALL SESSION AGENTS
-- ============================================================================
-- Concatenate all session agents and PureCloud domains into single
-- comma-separated string per account and data source
-- ============================================================================
aggregated_agents AS (
    SELECT
        "account_no",
        "data_source",
        STRING_AGG(DISTINCT agent, ',' ORDER BY agent) as all_session_agents
    FROM all_session_agents
    GROUP BY "account_no", "data_source"
),

-- ============================================================================
-- FUNCTION 12: EXTRACT SIP INTERFACE IPs FROM CUSTOMER REALMS
-- ============================================================================
-- Get SIP interface IP addresses for all customer-specific realms
-- ============================================================================
customer_sip_interfaces AS (
    SELECT DISTINCT
        cre."account_no",
        cre."data_source",
        si."sipport_address"
    FROM customer_realm_extract cre
    INNER JOIN sip_interface si 
        ON cre.individual_realm = si."realm_id"
        AND cre."data_source" = si."data_source"
),

-- ============================================================================
-- FUNCTION 13: EXTRACT SIP INTERFACE IPs FROM CLOUD-AWS REALM
-- ============================================================================
-- Get SIP interface IP addresses for cloud-aws realm if customer uses it
-- ============================================================================
cloud_aws_sip_interfaces AS (
    SELECT DISTINCT
        car."account_no",
        car."data_source",
        si."sipport_address"
    FROM cloud_aws_realms car
    INNER JOIN sip_interface si
        ON car.realm_name = si."realm_id"
        AND car."data_source" = si."data_source"
),

-- ============================================================================
-- FUNCTION 14: COMBINE ALL SIP INTERFACE IPs
-- ============================================================================
-- Merge customer realm and cloud-aws SIP interfaces, excluding carrier
-- interfaces, and aggregate into comma-separated list
-- ============================================================================
sip_interfaces AS (
    SELECT
        "account_no",
        "data_source",
        STRING_AGG(DISTINCT "sipport_address", ', ' ORDER BY "sipport_address") as ip_addresses
    FROM (
        SELECT "account_no", "data_source", "sipport_address" FROM customer_sip_interfaces
        UNION
        SELECT "account_no", "data_source", "sipport_address" FROM cloud_aws_sip_interfaces
    ) combined
    GROUP BY "account_no", "data_source"
),

-- ============================================================================
-- FUNCTION 15: AGGREGATE LOCAL POLICY ROUTING RULES
-- ============================================================================
-- Concatenate all local policy entries per account into pipe-delimited
-- summary for detailed routing analysis
-- ============================================================================
local_policy_details AS (
    SELECT 
        "account_no",
        "data_source",
        STRING_AGG(
            CONCAT_WS('<|>',
                "data_source",
                COALESCE("lp_from_range", ''),
                COALESCE("lp_to_range", ''),
                COALESCE("active", ''),
                COALESCE("src_realm", ''),
                COALESCE("hoplist", ''),
                COALESCE("dest_realms", '')
            ),
            '|' || E'\n'
            ORDER BY "lp_from_range", "lp_to_range"
        ) as policy_details
    FROM local_policy
    WHERE ("data_source" LIKE 'SYD1%' OR "data_source" LIKE 'SYD2%')
    GROUP BY "account_no", "data_source"
),

-- ============================================================================
-- FUNCTION 16: IDENTIFY IVP-ONLY CUSTOMERS (NO GEN1)
-- ============================================================================
-- Find customers that have IVP services but no Gen1 local_policy entries
-- ============================================================================
customers_without_gen1 AS (
    SELECT DISTINCT
        c."customer",
        c."account_no",
        c."ivp_externalid"
    FROM gen1_ntwk_data c
    LEFT JOIN local_policy lp 
        ON c."account_no" = lp."account_no" 
        AND (lp."data_source" LIKE 'SYD1%' OR lp."data_source" LIKE 'SYD2%')
    WHERE lp."account_no" IS NULL
)

-- ============================================================================
-- FUNCTION 17: PRIORITIZE SYD1 OVER SYD2 IN OUTPUT
-- ============================================================================
-- Wrap UNION query in subquery to enable ORDER BY with expressions
-- SYD1 records appear first (priority 1), then SYD2 (priority 2)
-- This ensures JavaScript .find() selects SYD1 data when both exist
-- ============================================================================
SELECT * FROM (
    SELECT DISTINCT
        cr."customer",
        cr."account_no",
        cr."data_source",
        -- Build source_realm list with ALL cust-* realms plus cloud-aws if applicable
        CASE
            WHEN cr.customer_realm IS NOT NULL AND cr.has_cloud_aws THEN cr.customer_realm || ',cloud-aws'
            WHEN cr.customer_realm IS NOT NULL THEN cr.customer_realm
            WHEN cr.has_cloud_aws THEN 'cloud-aws'
            ELSE NULL
        END as "source_realm",
        CONCAT_WS(', ',
            CASE WHEN cr.vocus THEN 'Vocus' END,
            CASE WHEN cr.symbio THEN 'Symbio' END,
            CASE WHEN cr.aapt THEN 'AAPT' END,
            CASE WHEN cr.optus THEN 'Optus' END,
            CASE WHEN cr.telstra THEN 'Telstra' END
        ) as "carrier_connections",
        cr.uses_sema_payments,
        NULL as "genesys_purecloud_domains",
        aa.all_session_agents as "customer_realm_session_agents",
        si.ip_addresses as "sip_interface_ips",
        cr.traffic_via_ibm_azure as "gen1_ivp_backbone",
        lpd.policy_details as "local_policy_summary",
        -- IVP account columns
        ivp."externalid" as "ivp_externalid",
        ivp."accountname" as "ivp_accountname",
        ivp."accountstatus" as "ivp_accountstatus",
        ivp."path" as "ivp_path",
        ivp."svcParty" as "ivp_svcParty",
        ivp."svcSIP" as "ivp_svcSIP",
        ivp."svcVoiceGateway" as "ivp_svcVoiceGateway",
        ivp."svccarriages" as "ivp_svccarriages",
        -- IVP service columns
        ivps."IVPName",
        ivps."Region Name",
        ivps."Routing Domain",
        ivps."Inbound server/uri",
        ivps."Outbound server/uri",
        ivps."ACL"
    FROM customer_realms cr
    LEFT JOIN aggregated_agents aa ON cr."account_no" = aa."account_no" AND cr."data_source" = aa."data_source"
    LEFT JOIN sip_interfaces si ON cr."account_no" = si."account_no" AND cr."data_source" = si."data_source"
    LEFT JOIN local_policy_details lpd ON cr."account_no" = lpd."account_no" AND cr."data_source" = lpd."data_source"
    LEFT JOIN ivp_account_data ivp ON cr."account_no" = ivp."account_no"
    LEFT JOIN ivp_service_data ivps ON ivp."externalid" = ivps."externalid"

    UNION ALL

    SELECT DISTINCT
        cwg."customer",
        cwg."account_no",
        NULL as "data_source",
        NULL as "source_realm",
        NULL as "carrier_connections",
        NULL::boolean as "uses_sema_payments",
        NULL as "genesys_purecloud_domains",
        NULL as "customer_realm_session_agents",
        NULL as "sip_interface_ips",
        NULL::boolean as "gen1_ivp_backbone",
        NULL as "local_policy_summary",
        ivp."externalid" as "ivp_externalid",
        ivp."accountname" as "ivp_accountname",
        ivp."accountstatus" as "ivp_accountstatus",
        ivp."path" as "ivp_path",
        ivp."svcParty" as "ivp_svcParty",
        ivp."svcSIP" as "ivp_svcSIP",
        ivp."svcVoiceGateway" as "ivp_svcVoiceGateway",
        ivp."svccarriages" as "ivp_svccarriages",
        ivps."IVPName",
        ivps."Region Name",
        ivps."Routing Domain",
        ivps."Inbound server/uri",
        ivps."Outbound server/uri",
        ivps."ACL"
    FROM customers_without_gen1 cwg
    LEFT JOIN ivpaccounts ivp ON cwg."ivp_externalid" = ivp."externalid"
    LEFT JOIN ivp_service_data ivps ON ivp."externalid" = ivps."externalid"
) combined_results
ORDER BY "customer", 
         CASE 
           WHEN "data_source" LIKE 'SYD1%' THEN 1 
           WHEN "data_source" LIKE 'SYD2%' THEN 2 
           ELSE 3 
         END,
         "data_source";