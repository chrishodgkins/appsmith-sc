{
  "accentColor": "{{appsmith.theme.colors.primaryColor}}",
  "animateLoading": true,
  "autoFocus": false,
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "bottomRow": 217,
  "bottomRowBeforeCollapse": 217,
  "boxShadow": "none",
  "defaultText": "{{\n  (() => {\n    // ============================================================================\n    // FUNCTION 1: GET SELECTED CUSTOMER\n    // ============================================================================\n    const selectedAccountNo = Select1.selectedOptionValue;\n    \n    // ============================================================================\n    // FUNCTION 2: DEFAULT DIAGRAM - NO SELECTION\n    // ============================================================================\n    if (!selectedAccountNo) {\n      return `flowchart TD\n    msg[\"Select a customer\nto view network diagram\"]\n    style msg fill:#f0f0f0,stroke:#999,stroke-width:2px,color:#666`;\n    }\n    \n    // ============================================================================\n    // FUNCTION 3: FIND CUSTOMER DATA\n    // ============================================================================\n    const customer = manipTable.tableData.find(c => c.account_no === selectedAccountNo);\n    \n    if (!customer) {\n      return `flowchart TD\n    msg[\"Account ${selectedAccountNo}\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // ============================================================================\n    // FUNCTION 4: UTILITY FUNCTIONS\n    // ============================================================================\n    const parseJsonField = (field) => {\n      if (!field || field === 'null' || field === '[]') return [];\n      try {\n        return JSON.parse(field);\n      } catch {\n        return [];\n      }\n    };\n    \n    const splitConcatenatedField = (field) => {\n      if (!field || field === 'null' || field === 'N/A') return [];\n      return field.split(', ').map(s => s.trim());\n    };\n    \n    // ============================================================================\n    // FUNCTION 5: EXTRACT CUSTOMER METADATA\n    // ============================================================================\n    let carriers = customer.carrier_connections || \"Carrier\";\n    const usesSema = customer.uses_sema_payments === true;\n    const hasBackbone = customer.gen1_ivp_backbone === true;\n    const customerName = customer.customer;\n    const accountNo = customer.account_no;\n    \n    // ============================================================================\n    // FUNCTION 6: CHECK FOR GEN1 CONFIGURATION\n    // ============================================================================\n    const sourceRealm = customer.source_realm || \"\";\n    const hasGen1Realm = sourceRealm !== \"\" && sourceRealm !== null && sourceRealm !== \"null\";\n    \n    const hasLocalPolicyData = customer.local_policy_summary && \n      customer.local_policy_summary !== 'null' && \n      customer.local_policy_summary.trim() !== '';\n    \n    const hasGen1DataSource = customer.data_source && \n      (customer.data_source.startsWith('SYD1') || customer.data_source.startsWith('SYD2'));\n    \n    const showGen1Customer = hasGen1Realm || hasLocalPolicyData || hasGen1DataSource;\n    \n    // ============================================================================\n    // FUNCTION 7: FIND SYD1/SYD2 SPECIFIC DATA (GEN1 ONLY)\n    // ============================================================================\n    const syd1Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source && c.data_source.startsWith('SYD1')\n    );\n    const syd2Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source && c.data_source.startsWith('SYD2')\n    );\n    \n    // ============================================================================\n    // FUNCTION 8: BUILD SESSION AGENT INFO (GEN1 ONLY)\n    // ============================================================================\n    const buildSessionAgentInfo = (data) => {\n      if (!data) return \"N/A\";\n      \n      const realm = data.source_realm || \"N/A\";\n      const sessionAgentsRaw = data.customer_realm_session_agents || \"N/A\";\n      const sessionAgents = sessionAgentsRaw === \"N/A\" ? \"N/A\" : \n        sessionAgentsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      const sipIpsRaw = data.sip_interface_ips || \"N/A\";\n      const sipIps = sipIpsRaw === \"N/A\" ? \"N/A\" : \n        sipIpsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      return `Realm: ${realm}<br/>Agents:<br/>${sessionAgents}<br/>SIP IPs:<br/>${sipIps}`;\n    };\n    \n    const sessagen1 = buildSessionAgentInfo(syd1Data);\n    const sessagen2 = buildSessionAgentInfo(syd2Data);\n    \n    // ============================================================================\n    // FUNCTION 9: GET FIRST IVP DATA ROW (IDEMPOTENT - DEDUPLICATE)\n    // ============================================================================\n    // Find first row with IVP services to avoid duplicates\n    const allCustomerRows = manipTable.tableData.filter(c => c.account_no === selectedAccountNo);\n    const firstIvpRow = allCustomerRows.find(row => {\n      const sipSvcs = parseJsonField(row.ivp_svcSIP);\n      const voiceGws = parseJsonField(row.ivp_svcVoiceGateway);\n      return sipSvcs.length > 0 || voiceGws.length > 0;\n    });\n    \n    // ============================================================================\n    // FUNCTION 10: BUILD IVP SERVICE MAPPING TABLE\n    // ============================================================================\n    const buildIvpServiceTable = (data) => {\n      if (!data) return { serviceTable: [], carriages: [] };\n      \n      const sipSvcs = parseJsonField(data.ivp_svcSIP);\n      const voiceGws = parseJsonField(data.ivp_svcVoiceGateway);\n      const carriages = parseJsonField(data.ivp_svccarriages);\n      \n      const regionNames = splitConcatenatedField(data[\"Region Name\"]);\n      const ivpNames = splitConcatenatedField(data.IVPName);\n      const routingDomains = splitConcatenatedField(data[\"Routing Domain\"]);\n      const inboundUris = splitConcatenatedField(data[\"Inbound server/uri\"]);\n      \n      const serviceTable = [];\n      \n      // Process SIP services\n      sipSvcs.forEach((svc, idx) => {\n        serviceTable.push({\n          type: 'SIP',\n          regionName: regionNames[idx] || 'AU1',\n          ivpName: ivpNames[idx] || 'N/A',\n          routingDomain: routingDomains[idx] || 'N/A',\n          inboundUri: inboundUris[idx] || 'N/A',\n          serviceData: svc,\n          index: idx\n        });\n      });\n      \n      // Process Voice Gateway services\n      voiceGws.forEach((gw, idx) => {\n        const serviceIdx = sipSvcs.length + idx;\n        serviceTable.push({\n          type: 'VoiceGateway',\n          regionName: regionNames[serviceIdx] || 'AU1',\n          ivpName: ivpNames[serviceIdx] || 'N/A',\n          routingDomain: routingDomains[serviceIdx] || 'N/A',\n          inboundUri: inboundUris[serviceIdx] || 'N/A',\n          serviceData: gw,\n          index: serviceIdx\n        });\n      });\n      \n      return { serviceTable, carriages };\n    };\n    \n    const ivpData = buildIvpServiceTable(firstIvpRow);\n    const hasAnyIvpServices = ivpData.serviceTable.length > 0;\n    const hasIvpCarriages = ivpData.carriages.length > 0;\n    \n    // ============================================================================\n    // FUNCTION 11: VALIDATE CUSTOMER HAS CONNECTIONS\n    // ============================================================================\n    if (!hasGen1Realm && !hasAnyIvpServices) {\n      return `flowchart TD\n    msg[\"${customerName}\n(${accountNo})\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // ============================================================================\n    // FUNCTION 12: BUILD IVP INSTANCES AND CONNECTIONS\n    // ============================================================================\n    const buildIvpComponents = (serviceTable) => {\n      if (serviceTable.length === 0) {\n        return {\n          ivpInstances: new Set(),\n          connections: [],\n          serviceBoxes: []\n        };\n      }\n      \n      // Extract unique region names to build IVP instances\n      const ivpInstances = new Set();\n      serviceTable.forEach(svc => {\n        ivpInstances.add(svc.regionName);\n      });\n      \n      // Count services per IVP instance for sequential numbering\n      const instanceCounters = {};\n      ivpInstances.forEach(region => {\n        instanceCounters[region] = 0;\n      });\n      \n      // Build connections and service boxes\n      const connections = [];\n      const serviceBoxes = [];\n      \n      serviceTable.forEach(svc => {\n        const region = svc.regionName;\n        instanceCounters[region]++;\n        const seqNum = instanceCounters[region];\n        \n        // Create service node ID\n        const serviceNodeId = `service_inbound_${region}_${seqNum}`;\n        \n        // Create connection from IVP to service\n        const connId = `ivpConnect_${region}_${seqNum}`;\n        connections.push({\n          from: `IVP${region}`,\n          to: serviceNodeId,\n          label: svc.routingDomain,\n          id: connId\n        });\n        \n        // Create service box\n        const serviceLabel = svc.type === 'SIP' \n          ? `${svc.ivpName}<br/>${svc.serviceData.profile.name}<br/>Inbound: ${svc.inboundUri}`\n          : `${svc.ivpName}<br/>Inbound: ${svc.inboundUri}`;\n        \n        serviceBoxes.push({\n          id: serviceNodeId,\n          label: serviceLabel\n        });\n      });\n      \n      return { ivpInstances, connections, serviceBoxes };\n    };\n    \n    const ivpComponents = buildIvpComponents(ivpData.serviceTable);\n    const hasIvpAU1 = ivpComponents.ivpInstances.has('AU1');\n    const hasIvpAU2 = ivpComponents.ivpInstances.has('AU2');\n    const hasAnyIvp = ivpComponents.ivpInstances.size > 0;\n    \n    // ============================================================================\n    // FUNCTION 13: START BUILDING MERMAID DIAGRAM\n    // ============================================================================\n    let mermaid = `%%{init: {'flowchart': {'curve': 'linear'}} }%%\nflowchart LR\n\n%% FLOWS\n`;\n\n    // Add IVP connections\n    if (hasAnyIvp) {\n      mermaid += `ivp_spacer\\n`;\n      ivpComponents.connections.forEach(conn => {\n        mermaid += `${conn.from} --\"${conn.label}\"--> ${conn.to}\\n`;\n      });\n    }\n    \n    if (showGen1Customer) {\n      mermaid += `SYD1 --\"${sessagen1}\"--> Gen1Cust\nSYD2 --\"${sessagen2}\"--> Gen1Cust\n`;\n    }\n\n    // Only show carrier to SBC connections if Gen1 exists\n    if (showGen1Customer) {\n      mermaid += `carrier --> SYD1\ncarrier --> SYD2\n`;\n    }\n\n    // Add carrier to IVP connection if carriages exist\n    if (hasIvpCarriages && hasAnyIvp) {\n      const carriageLabel = ivpData.carriages.map(c => c.name).join('<br/>');\n      mermaid += `carrier --\"${carriageLabel}\"--> ivpgrp\n`;\n    }\n\n    // ============================================================================\n    // FUNCTION 14: DEFINE NODES - LEFT SIDE (CARRIERS)\n    // ============================================================================\n    mermaid += `\n%% LEFT\ncarrier[\"${carriers}\"]\n\n`;\n\n    // ============================================================================\n    // FUNCTION 15: DEFINE NODES - CENTER (IVP REGIONS)\n    // ============================================================================\n    if (hasAnyIvp) {\n      mermaid += `%% CENTER: IVP REGIONS (top)\nsubgraph ivpgrp[\"IVP Regions\"]\ndirection TB\nivp_spacer(( )):::invis\n`;\n      \n      if (hasIvpAU1) {\n        mermaid += `IVPAU1[\"IVP - AU1\"]\\n`;\n      }\n      if (hasIvpAU2) {\n        mermaid += `IVPAU2[\"IVP - AU2\"]\\n`;\n      }\n      \n      if (hasBackbone && showGen1Customer) {\n        mermaid += `ivp_anchor(( )):::invis\\n`;\n      }\n      \n      mermaid += `end\n\n`;\n    }\n    \n    // ============================================================================\n    // FUNCTION 16: DEFINE NODES - CENTER (DATA-CENTRE SBCs) - GEN1 ONLY\n    // ============================================================================\n    if (showGen1Customer) {\n      mermaid += `%% CENTER: DATA-CENTRE SBCs (middle + Sema)\nsubgraph dcs[\"Data-Centre SBCs\"]\ndirection TB\n`;\n      \n      if (usesSema) {\n        mermaid += `Sema[\"Sema\"]\\n`;\n      }\n      \n      mermaid += `SYD1[\"SYD1 Data-Centre SBC\"]\nSYD2[\"SYD2 Data-Centre SBC\"]\n`;\n      \n      if (hasAnyIvp && hasBackbone) {\n        mermaid += `dcs_anchor(( )):::invis\\n`;\n      }\n      \n      mermaid += `end\n\n`;\n      \n      if (hasAnyIvp && hasBackbone) {\n        mermaid += `%% backbone between groups\ndcs_anchor ---|\"Backbone Trunks\"| ivp_anchor\n\n`;\n      }\n    }\n    \n    // ============================================================================\n    // FUNCTION 17: DEFINE NODES - RIGHT SIDE (CUSTOMER BOXES)\n    // ============================================================================\n    mermaid += `%% RIGHT: CUSTOMERS\nsubgraph customers[\"Customers\"]\ndirection TB\n`;\n\n    // Add IVP customer service boxes\n    ivpComponents.serviceBoxes.forEach(box => {\n      mermaid += `${box.id}[\"${box.label}\"]\\n`;\n    });\n    \n    if (showGen1Customer) {\n      mermaid += `Gen1Cust[\"${customerName}<br/>(${accountNo})\"]\\n`;\n    }\n    \n    mermaid += `end\n\n`;\n\n    // ============================================================================\n    // FUNCTION 18: APPLY CSS CLASSES TO NODES\n    // ============================================================================\n    mermaid += `%% STYLING\nclassDef cloud fill:#eef6ff,stroke:#0b5aa6,stroke-width:2px,color:#0b2b4c;\nclassDef dc    fill:#e8f0ff,stroke:#0b2b4c,stroke-width:2px,color:#0b2b4c;\nclassDef box   fill:#f7f7f9,stroke:#0b2b4c,stroke-width:1.5px,color:#0b2b4c;\nclassDef invis fill:transparent,stroke:transparent,color:transparent;\nclassDef smallText font-size:11px;\n\n`;\n    \n    if (hasAnyIvp) {\n      mermaid += `class IVPAU1,IVPAU2 cloud;\\n`;\n    }\n    \n    if (showGen1Customer) {\n      const dcClasses = usesSema ? 'SYD1,SYD2,Sema' : 'SYD1,SYD2';\n      mermaid += `class ${dcClasses} dc;\\n`;\n    }\n    \n    const boxClasses = ['carrier'];\n    boxClasses.push(...ivpComponents.serviceBoxes.map(b => b.id));\n    if (showGen1Customer) boxClasses.push('Gen1Cust');\n    \n    mermaid += `class ${boxClasses.join(',')} box;\\n\\n`;\n\n    // ============================================================================\n    // FUNCTION 19: APPLY STYLING TO SUBGRAPHS\n    // ============================================================================\n    if (hasAnyIvp) {\n      mermaid += `style ivpgrp    fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\\n`;\n    }\n    \n    if (showGen1Customer) {\n      mermaid += `style dcs       fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\n`;\n    }\n    \n    mermaid += `style customers fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\n`;\n\n    // ============================================================================\n    // FUNCTION 20: APPLY STYLING TO CONNECTION LINES (LINKS)\n    // ============================================================================\n    mermaid += `\\n%% Reduce font size on all connecting line labels\\n`;\n    \n    let linkCounter = 0;\n    \n    const totalConnections = ivpComponents.connections.length;\n    const gen1Links = showGen1Customer ? 4 : 0;\n    const carriageLinks = (hasIvpCarriages && hasAnyIvp) ? 1 : 0;\n    \n    for (let i = 0; i < totalConnections + gen1Links + carriageLinks; i++) {\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    }\n    \n    if (hasAnyIvp && hasBackbone && showGen1Customer) {\n      mermaid += `\\n%% Make the backbone line thick and solid\\nlinkStyle ${linkCounter} stroke:#009966,stroke-width:5px\\n`;\n    }\n    \n    // ============================================================================\n    // FUNCTION 21: RETURN COMPLETED MERMAID DIAGRAM\n    // ============================================================================\n    return mermaid;\n  })()\n}}",
  "displayName": "Input",
  "dynamicBindingPathList": [
    {
      "key": "accentColor"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultText"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [],
  "hideCard": false,
  "iconAlign": "left",
  "iconSVG": "/static/media/icon.9f505595da61a34f563dba82adeb06ec.svg",
  "inputType": "MULTI_LINE_TEXT",
  "isDeprecated": false,
  "isDisabled": false,
  "isLoading": false,
  "isRequired": false,
  "isVisible": false,
  "key": "6c4vyo9zar",
  "label": "Script",
  "labelAlignment": "left",
  "labelPosition": "Top",
  "labelStyle": "BOLD",
  "labelTextSize": "0.875rem",
  "labelWidth": 5,
  "leftColumn": 34,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "originalBottomRow": 217,
  "originalTopRow": 183,
  "parentColumnSpace": 7.841552734375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "resetOnSubmit": true,
  "rightColumn": 64,
  "searchTags": [
    "form",
    "text input",
    "number",
    "textarea"
  ],
  "topRow": 183,
  "topRowBeforeCollapse": 183,
  "type": "INPUT_WIDGET_V2",
  "version": 2,
  "widgetId": "y9s6m2kzno",
  "widgetName": "MermaidScript2"
}