{
  "accentColor": "{{appsmith.theme.colors.primaryColor}}",
  "animateLoading": true,
  "autoFocus": false,
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "bottomRow": 217,
  "bottomRowBeforeCollapse": 217,
  "boxShadow": "none",
  "defaultText": "{{\n  (() => {\n    // ============================================================================\n    // SECTION 1: GET SELECTED CUSTOMER\n    // ============================================================================\n    const selectedAccountNo = Select1.selectedOptionValue;\n    \n    // ============================================================================\n    // SECTION 2: DEFAULT DIAGRAM - NO SELECTION\n    // ============================================================================\n    if (!selectedAccountNo) {\n      return `flowchart TD\n    msg[\"Select a customer\nto view network diagram\"]\n    style msg fill:#f0f0f0,stroke:#999,stroke-width:2px,color:#666`;\n    }\n    \n    // ============================================================================\n    // SECTION 3: FIND CUSTOMER DATA\n    // ============================================================================\n    const customer = manipTable.tableData.find(c => c.account_no === selectedAccountNo);\n    \n    // Customer selected but not found in data\n    if (!customer) {\n      return `flowchart TD\n    msg[\"Account ${selectedAccountNo}\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // ============================================================================\n    // SECTION 4: UTILITY FUNCTIONS - PARSE JSON AND STRING FIELDS\n    // ============================================================================\n    // Parse IVP service data from JSON strings\n    const parseJsonField = (field) => {\n      if (!field || field === 'null' || field === '[]') return [];\n      try {\n        return JSON.parse(field);\n      } catch {\n        return [];\n      }\n    };\n    \n    // Split concatenated string field by \", \"\n    const splitConcatenatedField = (field) => {\n      if (!field || field === 'null' || field === 'N/A') return [];\n      return field.split(', ').map(s => s.trim());\n    };\n    \n    // ============================================================================\n    // SECTION 5: PARSE IVP SERVICE DATA (CASE-SENSITIVE FIELD NAMES)\n    // ============================================================================\n    const ivpSipServices = parseJsonField(customer.ivp_svcSIP);\n    const ivpVoiceGateways = parseJsonField(customer.ivp_svcVoiceGateway);\n    const ivpCarriages = parseJsonField(customer.ivp_svccarriages);\n    \n    // ============================================================================\n    // SECTION 6: EXTRACT CUSTOMER METADATA\n    // ============================================================================\n    // Build carrier list - exclude IVP carriages as they'll show on the connection line\n    let carriers = customer.carrier_connections || \"Carrier\";\n    const hasIvpCarriages = ivpCarriages.length > 0;\n    \n    const usesSema = customer.uses_sema_payments === true;\n    const hasBackbone = customer.gen1_ivp_backbone === true;\n    const customerName = customer.customer;\n    const accountNo = customer.account_no;\n    \n    // ============================================================================\n    // SECTION 7: CHECK FOR GEN1 CONFIGURATION (DETERMINES IF GEN1 CUSTOMER)\n    // ============================================================================\n    // A customer uses Gen1 if ANY of these conditions are true:\n    // 1. Has a source_realm (customer-specific realm)\n    // 2. Has local_policy_summary (routing rules through Gen1)\n    // 3. Has data_source starting with SYD1/SYD2 (Gen1 platform identifiers)\n    \n    const sourceRealm = customer.source_realm || \"\";\n    const hasGen1Realm = sourceRealm !== \"\" && sourceRealm !== null && sourceRealm !== \"null\";\n    \n    const hasLocalPolicyData = customer.local_policy_summary && \n    customer.local_policy_summary !== 'null' && \n    customer.local_policy_summary.trim() !== '';\n    \n    const hasGen1DataSource = customer.data_source && \n    (customer.data_source.startsWith('SYD1') || customer.data_source.startsWith('SYD2'));\n    \n    // Show Gen1 components if customer routes through Gen1 platform\n    const showGen1Customer = hasGen1Realm || hasLocalPolicyData || hasGen1DataSource;\n    \n    // ============================================================================\n    // SECTION 8: FIND SYD1/SYD2 SPECIFIC DATA (GEN1 ONLY)\n    // ============================================================================\n    const syd1Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source && c.data_source.startsWith('SYD1')\n    );\n    const syd2Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source && c.data_source.startsWith('SYD2')\n    );\n    \n    // For IVP-only customers (no Gen1), use main customer record for IVP data\n    const ivpOnlyData = !hasGen1Realm ? customer : null;\n    \n    // ============================================================================\n    // SECTION 9: CHECK IF CUSTOMER HAS ANY IVP SERVICES (OPTIMIZED)\n    // ============================================================================\n    // Reuse already-parsed service data instead of re-parsing\n    const hasAnyIvpServices = (ivpSipServices.length > 0 || ivpVoiceGateways.length > 0);\n    \n    // ============================================================================\n    // SECTION 10: VALIDATE CUSTOMER HAS CONNECTIONS\n    // ============================================================================\n    if (!hasGen1Realm && !hasAnyIvpServices) {\n      return `flowchart TD\n    msg[\"${customerName}\n(${accountNo})\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // ============================================================================\n    // SECTION 11: DETERMINE WHICH IVP REGIONS ARE CONNECTED (AU1/AU2) (OPTIMIZED)\n    // ============================================================================\n    const regionName = (hasGen1Realm ? (syd1Data?.[\"Region Name\"] || syd2Data?.[\"Region Name\"]) : customer[\"Region Name\"]) || \"\";\n    \n    const hasIvpAU1 = regionName.includes(\"AU1\") && hasAnyIvpServices;\n    const hasIvpAU2 = regionName.includes(\"AU2\") && hasAnyIvpServices;\n    const hasAnyIvp = hasAnyIvpServices;\n    \n    // ============================================================================\n    // SECTION 12: BUILD SESSION AGENT INFO (GEN1 ONLY)\n    // ============================================================================\n    const buildSessionAgentInfo = (data) => {\n      if (!data) return \"N/A\";\n      \n      const realm = data.source_realm || \"N/A\";\n      const sessionAgentsRaw = data.customer_realm_session_agents || \"N/A\";\n      const sessionAgents = sessionAgentsRaw === \"N/A\" ? \"N/A\" : \n        sessionAgentsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      const sipIpsRaw = data.sip_interface_ips || \"N/A\";\n      const sipIps = sipIpsRaw === \"N/A\" ? \"N/A\" : \n        sipIpsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      return `Realm: ${realm}<br/>Agents:<br/>${sessionAgents}<br/>SIP IPs:<br/>${sipIps}`;\n    };\n    \n    \n    // ============================================================================\n    // SECTION 13: BUILD IVP SERVICE BOXES AND CONNECTIONS FUNCTION (OPTIMIZED)\n    // ============================================================================\n    const buildIvpServices = (data, regionNum) => {\n    if (!data) return { boxes: [], connections: [] };\n    \n    const sipSvcs = parseJsonField(data.ivp_svcSIP);\n    const voiceGws = parseJsonField(data.ivp_svcVoiceGateway);\n    \n    // Split concatenated fields into arrays\n    const ivpNames = splitConcatenatedField(data.IVPName);\n    const routingDomains = splitConcatenatedField(data[\"Routing Domain\"]);\n    const inboundUris = splitConcatenatedField(data[\"Inbound server/uri\"]);\n    \n    const boxes = [];\n    const connections = [];\n    \n    // Unified service processor\n    const addService = (svc, idx, type) => {\n        const nodeId = `IVPCust_AU${regionNum}_${type}${idx}`;\n        const serviceIdx = type === 'SIP' ? idx : sipSvcs.length + idx;\n        const ivpName = ivpNames[serviceIdx] || \"N/A\";\n        const routingDomain = routingDomains[serviceIdx] || \"N/A\";\n        const inboundUri = inboundUris[serviceIdx] || \"N/A\";\n        \n        const boxLabel = type === 'SIP' \n        ? `${ivpName}<br/>${svc.profile.name}<br/>Inbound: ${inboundUri}`\n        : `${ivpName}<br/>Inbound: ${inboundUri}`;\n        \n        boxes.push({ id: nodeId, label: boxLabel });\n        connections.push({ from: `IVPAU${regionNum}`, to: nodeId, label: routingDomain });\n    };\n    \n    sipSvcs.forEach((svc, idx) => addService(svc, idx, 'SIP'));\n    voiceGws.forEach((vg, idx) => addService(vg, idx, 'VG'));\n    \n    return { boxes, connections };\n    };\n    \n    // ============================================================================\n    // SECTION 14: BUILD IVP SERVICES FOR AU1 AND AU2 REGIONS\n    // ============================================================================\n    const dataSourceAU1 = hasGen1Realm ? syd1Data : (hasIvpAU1 ? ivpOnlyData : null);\n    const dataSourceAU2 = hasGen1Realm ? syd2Data : (hasIvpAU2 ? ivpOnlyData : null);\n    \n    const ivpServicesAU1 = hasIvpAU1 ? buildIvpServices(dataSourceAU1, 1) : { boxes: [], connections: [] };\n    const ivpServicesAU2 = hasIvpAU2 ? buildIvpServices(dataSourceAU2, 2) : { boxes: [], connections: [] };\n    \n    const sessagen1 = buildSessionAgentInfo(syd1Data);\n    const sessagen2 = buildSessionAgentInfo(syd2Data);\n    \n    // ============================================================================\n    // SECTION 15: START BUILDING MERMAID DIAGRAM - HEADER AND FLOWS\n    // ============================================================================\n    let mermaid = `%%{init: {'flowchart': {'curve': 'linear'}} }%%\nflowchart LR\n\n%% FLOWS\n`;\n\n    // Add IVP connections\n    if (hasAnyIvp) {\n      mermaid += `ivp_spacer\\n`;\n      ivpServicesAU1.connections.forEach(conn => {\n        mermaid += `${conn.from} --\"${conn.label}\"--> ${conn.to}\\n`;\n      });\n      ivpServicesAU2.connections.forEach(conn => {\n        mermaid += `${conn.from} --\"${conn.label}\"--> ${conn.to}\\n`;\n      });\n    }\n    \n    if (showGen1Customer) {\n      mermaid += `SYD1 --\"${sessagen1}\"--> Gen1Cust\nSYD2 --\"${sessagen2}\"--> Gen1Cust\n`;\n    }\n\n    // Only show carrier to SBC connections if Gen1 exists\n    if (showGen1Customer) {\n      mermaid += `carrier --> SYD1\ncarrier --> SYD2\n`;\n    }\n\n    // Add carrier to IVP connection if carriages exist\n    if (hasIvpCarriages && hasAnyIvp) {\n      const carriageLabel = ivpCarriages.map(c => c.name).join('<br/>');\n      mermaid += `carrier --\"${carriageLabel}\"--> ivpgrp\n`;\n    }\n\n    // ============================================================================\n    // SECTION 16: DEFINE NODES - LEFT SIDE (CARRIERS)\n    // ============================================================================\n    mermaid += `\n%% LEFT\ncarrier[\"${carriers}\"]\n\n`;\n\n    // ============================================================================\n    // SECTION 17: DEFINE NODES - CENTER (IVP REGIONS)\n    // ============================================================================\n    if (hasAnyIvp) {\n    mermaid += `%% CENTER: IVP REGIONS (top)\n    subgraph ivpgrp[\"IVP Regions\"]\n    direction TB\n    ivp_spacer(( )):::invis\n    IVPAU1[\"IVP - AU1\"]\n    IVPAU2[\"IVP - AU2\"]\n    `;\n    \n    // Only add anchor if backbone will actually be drawn\n    if (hasBackbone && showGen1Customer) {\n        mermaid += `ivp_anchor(( )):::invis\\n`;\n    }\n    \n    mermaid += `end\n    \n    `;\n    }\n    \n    // ============================================================================\n    // SECTION 18: DEFINE NODES - CENTER (DATA-CENTRE SBCs) - GEN1 ONLY\n    // ============================================================================\n    if (showGen1Customer) {\n    mermaid += `%% CENTER: DATA-CENTRE SBCs (middle + Sema)\n    subgraph dcs[\"Data-Centre SBCs\"]\n    direction TB\n    `;\n    \n    if (usesSema) {\n        mermaid += `Sema[\"Sema\"]\\n`;\n    }\n    \n    mermaid += `SYD1[\"SYD1 Data-Centre SBC\"]\n    SYD2[\"SYD2 Data-Centre SBC\"]\n    `;\n    \n    // Only add anchor if backbone will actually be drawn\n    if (hasAnyIvp && hasBackbone) {\n        mermaid += `dcs_anchor(( )):::invis\\n`;\n    }\n    \n    mermaid += `end\n    \n    `;\n    \n    if (hasAnyIvp && hasBackbone) {\n        mermaid += `%% backbone between groups\n    dcs_anchor ---|\"Backbone Trunks\"| ivp_anchor\n    \n    `;\n    }\n    }\n    \n    // ============================================================================\n    // SECTION 19: DEFINE NODES - RIGHT SIDE (CUSTOMER BOXES)\n    // ============================================================================\n    mermaid += `%% RIGHT: CUSTOMERS\nsubgraph customers[\"Customers\"]\ndirection TB\n`;\n\n    // Add IVP customer boxes\n    ivpServicesAU1.boxes.forEach(box => {\n      mermaid += `${box.id}[\"${box.label}\"]\\n`;\n    });\n    ivpServicesAU2.boxes.forEach(box => {\n      mermaid += `${box.id}[\"${box.label}\"]\\n`;\n    });\n    \n    if (showGen1Customer) {\n      mermaid += `Gen1Cust[\"${customerName}<br/>(${accountNo})\"]\\n`;\n    }\n    \n    mermaid += `end\n\n`;\n\n    // ============================================================================\n    // SECTION 20: APPLY CSS CLASSES TO NODES (OPTIMIZED)\n    // ============================================================================\n    mermaid += `%% STYLING\n    classDef cloud fill:#eef6ff,stroke:#0b5aa6,stroke-width:2px,color:#0b2b4c;\n    classDef dc    fill:#e8f0ff,stroke:#0b2b4c,stroke-width:2px,color:#0b2b4c;\n    classDef box   fill:#f7f7f9,stroke:#0b2b4c,stroke-width:1.5px,color:#0b2b4c;\n    classDef invis fill:transparent,stroke:transparent,color:transparent;\n    classDef smallText font-size:11px;\n    \n    `;\n    \n    if (hasAnyIvp) {\n    mermaid += `class IVPAU1,IVPAU2 cloud;\\n`;\n    }\n    \n    if (showGen1Customer) {\n    const dcClasses = usesSema ? 'SYD1,SYD2,Sema' : 'SYD1,SYD2';\n    mermaid += `class ${dcClasses} dc;\\n`;\n    }\n    \n    // Build box classes array and join\n    const boxClasses = ['carrier'];\n    boxClasses.push(...ivpServicesAU1.boxes.map(b => b.id));\n    boxClasses.push(...ivpServicesAU2.boxes.map(b => b.id));\n    if (showGen1Customer) boxClasses.push('Gen1Cust');\n    \n    mermaid += `class ${boxClasses.join(',')} box;\\n\\n`;\n\n\n    // ============================================================================\n    // SECTION 21: APPLY STYLING TO SUBGRAPHS\n    // ============================================================================\n    if (hasAnyIvp) {\n      mermaid += `style ivpgrp    fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\\n`;\n    }\n    \n    if (showGen1Customer) {\n      mermaid += `style dcs       fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\n`;\n    }\n    \n    mermaid += `style customers fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\n`;\n\n    // ============================================================================\n    // SECTION 22: APPLY STYLING TO CONNECTION LINES (LINKS) (OPTIMIZED)\n    // ============================================================================\n    mermaid += `\\n%% Reduce font size on all connecting line labels\\n`;\n    \n    let linkCounter = 0;\n    \n    // Style all IVP and Gen1 connection links\n    const totalConnections = ivpServicesAU1.connections.length + ivpServicesAU2.connections.length;\n    const gen1Links = showGen1Customer ? 4 : 0; // 2 SBC + 2 carrier connections\n    const carriageLinks = (hasIvpCarriages && hasAnyIvp) ? 1 : 0;\n    \n    for (let i = 0; i < totalConnections + gen1Links + carriageLinks; i++) {\n    mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    }\n    \n    if (hasAnyIvp && hasBackbone && showGen1Customer) {\n    mermaid += `\\n%% Make the backbone line thick and solid\\nlinkStyle ${linkCounter} stroke:#009966,stroke-width:5px\\n`;\n    }\n    \n    // ============================================================================\n    // SECTION 23: RETURN COMPLETED MERMAID DIAGRAM\n    // ============================================================================\n    return mermaid;\n  })()\n}}",
  "displayName": "Input",
  "dynamicBindingPathList": [
    {
      "key": "accentColor"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultText"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [],
  "hideCard": false,
  "iconAlign": "left",
  "iconSVG": "/static/media/icon.9f505595da61a34f563dba82adeb06ec.svg",
  "inputType": "MULTI_LINE_TEXT",
  "isDeprecated": false,
  "isDisabled": false,
  "isLoading": false,
  "isRequired": false,
  "isVisible": false,
  "key": "6c4vyo9zar",
  "label": "Script",
  "labelAlignment": "left",
  "labelPosition": "Top",
  "labelStyle": "BOLD",
  "labelTextSize": "0.875rem",
  "labelWidth": 5,
  "leftColumn": 56,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "originalBottomRow": 217,
  "originalTopRow": 183,
  "parentColumnSpace": 7.841552734375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "resetOnSubmit": true,
  "rightColumn": 64,
  "searchTags": [
    "form",
    "text input",
    "number",
    "textarea"
  ],
  "topRow": 183,
  "topRowBeforeCollapse": 183,
  "type": "INPUT_WIDGET_V2",
  "version": 2,
  "widgetId": "y9s6m2kzno",
  "widgetName": "MermaidScript2"
}