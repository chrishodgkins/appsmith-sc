{
  "accentColor": "{{appsmith.theme.colors.primaryColor}}",
  "animateLoading": true,
  "autoFocus": false,
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "bottomRow": 188,
  "bottomRowBeforeCollapse": 188,
  "boxShadow": "none",
  "defaultText": "{{\n  (() => {\n    // Get selected customer from dropdown\n    const selectedAccountNo = Select1.selectedOptionValue;\n    \n    // DEFAULT DIAGRAM - Nothing selected\n    if (!selectedAccountNo) {\n      return `flowchart TD\n    msg[\"Select a customer\nto view network diagram\"]\n    style msg fill:#f0f0f0,stroke:#999,stroke-width:2px,color:#666`;\n    }\n    \n    // Find customer data from manipTable\n    const customer = manipTable.tableData.find(c => c.account_no === selectedAccountNo);\n    \n    // Customer selected but not found in data\n    if (!customer) {\n      return `flowchart TD\n    msg[\"Account ${selectedAccountNo}\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // Parse IVP service data\n    const parseJsonField = (field) => {\n      if (!field || field === 'null' || field === '[]') return [];\n      try {\n        return JSON.parse(field);\n      } catch {\n        return [];\n      }\n    };\n    \n    // Split concatenated string field by \", \"\n    const splitConcatenatedField = (field) => {\n      if (!field || field === 'null' || field === 'N/A') return [];\n      return field.split(', ').map(s => s.trim());\n    };\n    \n    const ivpSipServices = parseJsonField(customer.ivp_svcsip);\n    const ivpVoiceGateways = parseJsonField(customer.ivp_svcvoicegateway);\n    const ivpCarriages = parseJsonField(customer.ivp_svccarriages);\n    \n    // Build carrier list - exclude IVP carriages as they'll show on the connection line\n    let carriers = customer.carrier_connections || \"No Carriers\";\n    const hasIvpCarriages = ivpCarriages.length > 0;\n    \n    const usesSema = customer.uses_sema_payments === true;\n    const hasBackbone = customer.gen1_ivp_backbone === true;\n    const customerName = customer.customer;\n    const accountNo = customer.account_no;\n    \n    // Check if customer has ANY source realm (Gen1 usage)\n    const sourceRealm = customer.source_realm || \"\";\n    const hasGen1Realm = true;  // FIX: Customer exists in data = has Gen1 connections\n    \n    // Determine if we show Gen1 customer NODE and CONNECTIONS TO customer\n    const showGen1Customer = hasGen1Realm || !hasBackbone;\n    \n    // Check if customer has ANY connections\n    if (!hasGen1Realm && !hasBackbone) {\n      return `flowchart TD\n    msg[\"${customerName}\n(${accountNo})\n\nNo Gen1 or IVP\nconnections found\"]\n    style msg fill:#fff3cd,stroke:#ffc107,stroke-width:2px,color:#856404`;\n    }\n    \n    // Find SYD1 and SYD2 specific data\n    const syd1Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source.startsWith('SYD1')\n    );\n    const syd2Data = manipTable.tableData.find(c => \n      c.account_no === selectedAccountNo && c.data_source.startsWith('SYD2')\n    );\n    \n    // First, check if customer has ANY IVP services at all\n    const ivpSipAU1 = syd1Data ? parseJsonField(syd1Data.ivp_svcsip) : [];\n    const ivpVgAU1 = syd1Data ? parseJsonField(syd1Data.ivp_svcvoicegateway) : [];\n    const ivpSipAU2 = syd2Data ? parseJsonField(syd2Data.ivp_svcsip) : [];\n    const ivpVgAU2 = syd2Data ? parseJsonField(syd2Data.ivp_svcvoicegateway) : [];\n    \n    const hasAnyIvpServices = (ivpSipAU1.length > 0 || ivpVgAU1.length > 0 || \n                            ivpSipAU2.length > 0 || ivpVgAU2.length > 0);\n    \n    // Now determine which regions are actually CONNECTED (for drawing lines)\n    // If Region Name is null, infer from data_source (SYD1 = AU1, SYD2 = AU2)\n    const hasIvpAU1 = syd1Data && (\n    (syd1Data[\"Region Name\"] && syd1Data[\"Region Name\"].includes(\"AU1\")) ||\n    (!syd1Data[\"Region Name\"] && (ivpSipAU1.length > 0 || ivpVgAU1.length > 0))\n    );\n    \n    const hasIvpAU2 = syd2Data && (\n    (syd2Data[\"Region Name\"] && syd2Data[\"Region Name\"].includes(\"AU2\")) ||\n    (!syd2Data[\"Region Name\"] && (ivpSipAU2.length > 0 || ivpVgAU2.length > 0))\n    );\n\nconst hasAnyIvp = hasAnyIvpServices; // Show IVP group if ANY services exist\n    \n    // Build session agent info for each data source\n    const buildSessionAgentInfo = (data) => {\n      if (!data) return \"N/A\";\n      \n      const realm = data.source_realm || \"N/A\";\n      const sessionAgentsRaw = data.customer_realm_session_agents || \"N/A\";\n      const sessionAgents = sessionAgentsRaw === \"N/A\" ? \"N/A\" : \n        sessionAgentsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      const sipIpsRaw = data.sip_interface_ips || \"N/A\";\n      const sipIps = sipIpsRaw === \"N/A\" ? \"N/A\" : \n        sipIpsRaw.split(',').map(s => s.trim()).join('<br/>');\n      \n      return `Realm: ${realm}<br/>Agents:<br/>${sessionAgents}<br/>SIP IPs:<br/>${sipIps}`;\n    };\n    \n    // Build IVP service boxes and connections\n    const buildIvpServices = (data, regionNum) => {\n      if (!data) return { boxes: [], connections: [] };\n      \n      const sipSvcs = parseJsonField(data.ivp_svcsip);\n      const voiceGws = parseJsonField(data.ivp_svcvoicegateway);\n      \n      // Split concatenated fields into arrays\n      const ivpNames = splitConcatenatedField(data.IVPName);\n      const routingDomains = splitConcatenatedField(data[\"Routing Domain\"]);\n      const inboundUris = splitConcatenatedField(data[\"Inbound server/uri\"]);\n      const outboundUris = splitConcatenatedField(data[\"Outbound server/uri\"]);\n      \n      const boxes = [];\n      const connections = [];\n      let serviceIndex = 0;\n      \n      // Add SIP Services\n      sipSvcs.forEach((svc, idx) => {\n        const nodeId = `IVPCust_AU${regionNum}_SIP${idx}`;\n        const ivpName = ivpNames[serviceIndex] || \"N/A\";\n        const routingDomain = routingDomains[serviceIndex] || \"N/A\";\n        const inboundUri = inboundUris[serviceIndex] || \"N/A\";\n        const outboundUri = outboundUris[serviceIndex] || \"N/A\";\n        \n        const boxLabel = `${ivpName}<br/>${svc.profile.name}<br/>Inbound: ${inboundUri}`;\n        boxes.push({ id: nodeId, label: boxLabel });\n        connections.push({ \n          from: `IVPAU${regionNum}`, \n          to: nodeId, \n          label: routingDomain \n        });\n        serviceIndex++;\n      });\n      \n      // Add Voice Gateways\n      voiceGws.forEach((vg, idx) => {\n        const nodeId = `IVPCust_AU${regionNum}_VG${idx}`;\n        const ivpName = ivpNames[serviceIndex] || \"N/A\";\n        const routingDomain = routingDomains[serviceIndex] || \"N/A\";\n        const inboundUri = inboundUris[serviceIndex] || \"N/A\";\n        const outboundUri = outboundUris[serviceIndex] || \"N/A\";\n        \n        const botCount = vg.bots ? vg.bots.length : 0;\n        const boxLabel = `${ivpName}<br/>Inbound: ${inboundUri}`;\n        boxes.push({ id: nodeId, label: boxLabel });\n        connections.push({ \n          from: `IVPAU${regionNum}`, \n          to: nodeId, \n          label: routingDomain \n        });\n        serviceIndex++;\n      });\n      \n      return { boxes, connections };\n    };\n    \n    const ivpServicesAU1 = hasIvpAU1 ? buildIvpServices(syd1Data, 1) : { boxes: [], connections: [] };\n    const ivpServicesAU2 = hasIvpAU2 ? buildIvpServices(syd2Data, 2) : { boxes: [], connections: [] };\n    \n    const sessagen1 = buildSessionAgentInfo(syd1Data);\n    const sessagen2 = buildSessionAgentInfo(syd2Data);\n    \n    // Build Mermaid diagram\n    let mermaid = `%%{init: {'flowchart': {'curve': 'linear'}} }%%\nflowchart LR\n\n%% FLOWS\n`;\n\n    // Add IVP connections\n    if (hasAnyIvp) {\n      mermaid += `ivp_spacer\\n`;\n      ivpServicesAU1.connections.forEach(conn => {\n        mermaid += `${conn.from} --\"${conn.label}\"--> ${conn.to}\\n`;\n      });\n      ivpServicesAU2.connections.forEach(conn => {\n        mermaid += `${conn.from} --\"${conn.label}\"--> ${conn.to}\\n`;\n      });\n    }\n    \n    if (showGen1Customer) {\n      mermaid += `SYD1 --\"${sessagen1}\"--> Gen1Cust\nSYD2 --\"${sessagen2}\"--> Gen1Cust\n`;\n    }\n\n    mermaid += `carrier --> SYD1\ncarrier --> SYD2\n`;\n\n    // Add carrier to IVP connection if carriages exist\n    if (hasIvpCarriages && hasAnyIvp) {\n      const carriageLabel = ivpCarriages.map(c => c.name).join('<br/>');\n      mermaid += `carrier --\"${carriageLabel}\"--> ivpgrp\n`;\n    }\n\n    mermaid += `\n%% LEFT\ncarrier[\"${carriers}\"]\n\n`;\n\n    if (hasAnyIvp) {\n      mermaid += `%% CENTER: IVP REGIONS (top)\nsubgraph ivpgrp[\"IVP Regions\"]\ndirection TB\nivp_spacer(( )):::invis\nIVPAU1[\"IVP - AU1\"]\nIVPAU2[\"IVP - AU2\"]\n`;\n      \n      if (hasBackbone) {\n        mermaid += `ivp_anchor(( )):::invis\\n`;\n      }\n      \n      mermaid += `end\n\n`;\n    }\n    \n    mermaid += `%% CENTER: DATA-CENTRE SBCs (middle + Sema)\nsubgraph dcs[\"Data-Centre SBCs\"]\ndirection TB\n`;\n\n    if (usesSema) {\n      mermaid += `Sema[\"Sema\"]\\n`;\n    }\n    \n    mermaid += `SYD1[\"SYD1 Data-Centre SBC\"]\nSYD2[\"SYD2 Data-Centre SBC\"]\n`;\n\n    if (hasAnyIvp && hasBackbone) {\n      mermaid += `dcs_anchor(( )):::invis\\n`;\n    }\n    \n    mermaid += `end\n\n`;\n\n    if (hasAnyIvp && hasBackbone) {\n      mermaid += `%% backbone between groups\ndcs_anchor ---|\"Backbone Trunks\"| ivp_anchor\n\n`;\n    }\n    \n    mermaid += `%% RIGHT: CUSTOMERS\nsubgraph customers[\"Customers\"]\ndirection TB\n`;\n\n    // Add IVP customer boxes\n    ivpServicesAU1.boxes.forEach(box => {\n      mermaid += `${box.id}[\"${box.label}\"]\\n`;\n    });\n    ivpServicesAU2.boxes.forEach(box => {\n      mermaid += `${box.id}[\"${box.label}\"]\\n`;\n    });\n    \n    if (showGen1Customer) {\n      mermaid += `Gen1Cust[\"${customerName}<br/>(${accountNo})\"]\\n`;\n    }\n    \n    mermaid += `end\n\n%% STYLING\nclassDef cloud fill:#eef6ff,stroke:#0b5aa6,stroke-width:2px,color:#0b2b4c;\nclassDef dc    fill:#e8f0ff,stroke:#0b2b4c,stroke-width:2px,color:#0b2b4c;\nclassDef box   fill:#f7f7f9,stroke:#0b2b4c,stroke-width:1.5px,color:#0b2b4c;\nclassDef invis fill:transparent,stroke:transparent,color:transparent;\nclassDef smallText font-size:11px;\n\n`;\n\n    if (hasAnyIvp) {\n      mermaid += `class IVPAU1,IVPAU2 cloud;\\n`;\n    }\n    \n    if (usesSema) {\n      mermaid += `class SYD1,SYD2,Sema dc;\\n`;\n    } else {\n      mermaid += `class SYD1,SYD2 dc;\\n`;\n    }\n    \n    mermaid += `class carrier`;\n    \n    // Add all IVP customer boxes to styling\n    ivpServicesAU1.boxes.forEach(box => {\n      mermaid += `,${box.id}`;\n    });\n    ivpServicesAU2.boxes.forEach(box => {\n      mermaid += `,${box.id}`;\n    });\n    \n    if (showGen1Customer) {\n      mermaid += `,Gen1Cust`;\n    }\n    mermaid += ` box;\n\n`;\n\n    if (hasAnyIvp) {\n      mermaid += `style ivpgrp    fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\\n`;\n    }\n    \n    mermaid += `style dcs       fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\nstyle customers fill:#ffffff,stroke:#ff6a3d,stroke-width:2px,color:#ff6a3d\n`;\n\n    mermaid += `\n%% Reduce font size on all connecting line labels\n`;\n    \n    let linkCounter = 0;\n    \n    // IVP connections\n    ivpServicesAU1.connections.forEach(() => {\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    });\n    ivpServicesAU2.connections.forEach(() => {\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    });\n    \n    // Gen1 connections\n    if (showGen1Customer) {\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    }\n    \n    // Carrier connections\n    mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    \n    // Style the IVP carriage connection if it exists\n    if (hasIvpCarriages && hasAnyIvp) {\n      mermaid += `linkStyle ${linkCounter++} font-size:11px;\\n`;\n    }\n    \n    if (hasAnyIvp && hasBackbone) {\n      mermaid += `\n%% Make the backbone line thick and solid\nlinkStyle ${linkCounter} stroke:#009966,stroke-width:5px\\n`;\n    }\n    \n    return mermaid;\n  })()\n}}",
  "displayName": "Input",
  "dynamicBindingPathList": [
    {
      "key": "accentColor"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultText"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [],
  "hideCard": false,
  "iconAlign": "left",
  "iconSVG": "/static/media/icon.9f505595da61a34f563dba82adeb06ec.svg",
  "inputType": "MULTI_LINE_TEXT",
  "isDeprecated": false,
  "isDisabled": false,
  "isLoading": false,
  "isRequired": false,
  "isVisible": false,
  "key": "6c4vyo9zar",
  "label": "Script",
  "labelAlignment": "left",
  "labelPosition": "Top",
  "labelStyle": "BOLD",
  "labelTextSize": "0.875rem",
  "labelWidth": 5,
  "leftColumn": 56,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "originalBottomRow": 188,
  "originalTopRow": 154,
  "parentColumnSpace": 7.841552734375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "resetOnSubmit": true,
  "rightColumn": 64,
  "searchTags": [
    "form",
    "text input",
    "number",
    "textarea"
  ],
  "topRow": 154,
  "topRowBeforeCollapse": 154,
  "type": "INPUT_WIDGET_V2",
  "version": 2,
  "widgetId": "y9s6m2kzno",
  "widgetName": "MermaidScript2"
}