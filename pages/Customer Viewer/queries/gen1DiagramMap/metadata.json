{
  "gitSyncId": "6833bd1e663f59025c630a90_1e489b3d-7d50-45a7-be38-f747d59e854a",
  "id": "Customer Viewer_gen1DiagramMap",
  "pluginId": "postgres-plugin",
  "pluginType": "DB",
  "unpublishedAction": {
    "actionConfiguration": {
      "body": "WITH data_source_lookup AS (\n    -- Get data_source for each account from local_policy\n    SELECT DISTINCT\n        account_no,\n        data_source\n    FROM local_policy\n    WHERE (data_source LIKE 'SYD1%' OR data_source LIKE 'SYD2%')\n),\ncustomer_realm_extract AS (\n    -- Extract ALL cust-* realms directly from local_policy, excluding secureco\n    SELECT DISTINCT\n        lp.account_no,\n        lp.data_source,\n        unnest(regexp_matches(lp.src_realm, 'cust-[a-zA-Z0-9_-]+', 'g')) as individual_realm\n    FROM local_policy lp\n    WHERE (lp.data_source LIKE 'SYD1%' OR lp.data_source LIKE 'SYD2%')\n        AND lp.src_realm IS NOT NULL\n        AND lp.src_realm NOT LIKE '%secureco%'\n),\n-- Extract cloud-aws realm usage per data_source (check src_realm, dest_realms, and hoplist)\ncloud_aws_realms AS (\n    SELECT DISTINCT\n        lp.account_no,\n        lp.data_source,\n        'cloud-aws' as realm_name\n    FROM local_policy lp\n    WHERE (lp.data_source LIKE 'SYD1%' OR lp.data_source LIKE 'SYD2%')\n        AND (lp.src_realm LIKE '%cloud-aws%' \n             OR lp.dest_realms LIKE '%cloud-aws%'\n             OR lp.hoplist LIKE '%cloud-aws%')\n),\ncustomer_realm_data AS (\n    -- Get other customer data from gen1_ntwk_data\n    SELECT DISTINCT\n        c.customer,\n        c.account_no,\n        c.lp_src_realm,\n        c.lp_nexthop_list,\n        c.flag_sema_onprem,\n        c.flag_sema_cloud,\n        c.lp_nextrealm_list,\n        c.vocus, c.symbio, c.aapt, c.optus, c.telstra\n    FROM gen1_ntwk_data c\n),\ncustomer_realms AS (\n    SELECT DISTINCT\n        crd.customer,\n        crd.account_no,\n        dsl.data_source,\n        -- Aggregate ALL cust-* realms found\n        STRING_AGG(DISTINCT cre.individual_realm, ',' ORDER BY cre.individual_realm) as customer_realm,\n        -- Check if customer uses cloud-aws\n        BOOL_OR(crd.lp_src_realm LIKE '%cloud-aws%' OR crd.lp_nexthop_list LIKE '%cloud-aws%') as has_cloud_aws,\n        BOOL_OR(crd.flag_sema_onprem = 'true' OR crd.flag_sema_cloud = 'true') as uses_sema_payments,\n        MAX(crd.lp_nextrealm_list) as dest_realms,\n        BOOL_OR(\n            crd.lp_src_realm LIKE '%cloud-ibmsyd%' OR crd.lp_src_realm LIKE '%cloudAzure%'\n                OR crd.lp_nextrealm_list LIKE '%cloud-ibmsyd%' OR crd.lp_nextrealm_list LIKE '%cloudAzure%'\n        ) as traffic_via_ibm_azure,\n        BOOL_OR(crd.vocus = 'true') as vocus,\n        BOOL_OR(crd.symbio = 'true') as symbio,\n        BOOL_OR(crd.aapt = 'true') as aapt,\n        BOOL_OR(crd.optus = 'true') as optus,\n        BOOL_OR(crd.telstra = 'true') as telstra\n    FROM customer_realm_data crd\n    INNER JOIN data_source_lookup dsl ON crd.account_no = dsl.account_no\n    LEFT JOIN customer_realm_extract cre ON crd.account_no = cre.account_no AND dsl.data_source = cre.data_source\n    GROUP BY crd.customer, crd.account_no, dsl.data_source\n),\n-- Extract ALL PureCloud domains from local policy hoplist for each customer\npurecloud_domains AS (\n    SELECT DISTINCT\n        lp.account_no,\n        lp.data_source,\n        (regexp_matches(lp.hoplist, '(sc-[a-z0-9]+\\.byoc\\.mypurecloud\\.com\\.au)', 'g'))[1] as purecloud_domain\n    FROM local_policy lp\n    WHERE lp.hoplist LIKE '%.mypurecloud.com.au%'\n        AND (lp.data_source LIKE 'SYD1%' OR lp.data_source LIKE 'SYD2%')\n),\n-- Get customer terminating realm session agents for ALL realms\ncustomer_session_agents AS (\n    SELECT DISTINCT\n        cre.account_no,\n        cre.data_source,\n        sa.hostname as session_agent_hostname\n    FROM customer_realm_extract cre\n    INNER JOIN session_agent sa\n        ON cre.individual_realm = sa.realm_id\n        AND cre.data_source = sa.data_source\n),\n-- Combine all session agents\nall_session_agents AS (\n    SELECT account_no, data_source, session_agent_hostname as agent\n    FROM customer_session_agents\n    UNION ALL\n    SELECT account_no, data_source, purecloud_domain as agent\n    FROM purecloud_domains\n),\naggregated_agents AS (\n    SELECT\n        account_no,\n        data_source,\n        STRING_AGG(DISTINCT agent, ',' ORDER BY agent) as all_session_agents\n    FROM all_session_agents\n    GROUP BY account_no, data_source\n),\n-- Get SIP interfaces from customer realms\ncustomer_sip_interfaces AS (\n    SELECT DISTINCT\n        cre.account_no,\n        cre.data_source,\n        si.sipport_address\n    FROM customer_realm_extract cre\n    INNER JOIN sip_interface si \n        ON cre.individual_realm = si.realm_id\n        AND cre.data_source = si.data_source\n),\n-- Get SIP interfaces for cloud-aws realm\ncloud_aws_sip_interfaces AS (\n    SELECT DISTINCT\n        car.account_no,\n        car.data_source,\n        si.sipport_address\n    FROM cloud_aws_realms car\n    INNER JOIN sip_interface si\n        ON car.realm_name = si.realm_id\n        AND car.data_source = si.data_source\n),\n-- Combine all SIP interfaces (customer and cloud only, NO carrier interfaces)\nsip_interfaces AS (\n    SELECT\n        account_no,\n        data_source,\n        STRING_AGG(DISTINCT sipport_address, ', ' ORDER BY sipport_address) as ip_addresses\n    FROM (\n        SELECT account_no, data_source, sipport_address FROM customer_sip_interfaces\n        UNION\n        SELECT account_no, data_source, sipport_address FROM cloud_aws_sip_interfaces\n    ) combined\n    GROUP BY account_no, data_source\n),\n-- NEW CTE: Aggregate local_policy details per account\nlocal_policy_details AS (\n    SELECT \n        account_no,\n        data_source,\n        STRING_AGG(\n            CONCAT_WS('<|>',  -- Changed from ',' to '<|>'\n                COALESCE(lp_from_range, ''),\n                COALESCE(lp_to_range, ''),\n                COALESCE(active, ''),\n                COALESCE(src_realm, ''),\n                COALESCE(hoplist, ''),\n                COALESCE(dest_realms, '')\n            ),\n            '|' || E'\\n'\n            ORDER BY lp_from_range, lp_to_range\n        ) as policy_details\n    FROM local_policy\n    WHERE (data_source LIKE 'SYD1%' OR data_source LIKE 'SYD2%')\n    GROUP BY account_no, data_source\n)\nSELECT DISTINCT\n    cr.customer,\n    cr.account_no,\n    cr.data_source,\n    -- Build source_realm list with ALL cust-* realms plus cloud-aws if applicable\n    CASE\n        WHEN cr.customer_realm IS NOT NULL AND cr.has_cloud_aws THEN cr.customer_realm || ',cloud-aws'\n        WHEN cr.customer_realm IS NOT NULL THEN cr.customer_realm\n        WHEN cr.has_cloud_aws THEN 'cloud-aws'\n        ELSE NULL\n    END as source_realm,\n    CONCAT_WS(', ',\n        CASE WHEN cr.vocus THEN 'Vocus' END,\n        CASE WHEN cr.symbio THEN 'Symbio' END,\n        CASE WHEN cr.aapt THEN 'AAPT' END,\n        CASE WHEN cr.optus THEN 'Optus' END,\n        CASE WHEN cr.telstra THEN 'Telstra' END\n    ) as carrier_connections,\n    cr.uses_sema_payments,\n    NULL as genesys_purecloud_domains,\n    aa.all_session_agents as customer_realm_session_agents,\n    si.ip_addresses as sip_interface_ips,\n    cr.traffic_via_ibm_azure as gen1_ivp_backbone,\n    lpd.policy_details as local_policy_summary\nFROM customer_realms cr\nLEFT JOIN aggregated_agents aa ON cr.account_no = aa.account_no AND cr.data_source = aa.data_source\nLEFT JOIN sip_interfaces si ON cr.account_no = si.account_no AND cr.data_source = si.data_source\nLEFT JOIN local_policy_details lpd ON cr.account_no = lpd.account_no AND cr.data_source = lpd.data_source\nORDER BY cr.customer, cr.data_source;",
      "encodeParamsToggle": true,
      "paginationType": "NONE",
      "pluginSpecifiedTemplates": [
        {
          "value": true
        }
      ],
      "timeoutInMillisecond": 10000
    },
    "confirmBeforeExecute": false,
    "datasource": {
      "id": "Secco_Gen1_pgdb",
      "isAutoGenerated": false,
      "name": "Secco_Gen1_pgdb",
      "pluginId": "postgres-plugin"
    },
    "dynamicBindingPathList": [],
    "name": "gen1DiagramMap",
    "pageId": "Customer Viewer",
    "runBehaviour": "ON_PAGE_LOAD",
    "userSetOnLoad": false
  }
}